generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  status    String    @default("Active")
  Role      Role      @relation(fields: [role], references: [id], onDelete: Cascade)
  role      Int
  employee  Employee?
  project   Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Teams     Teams[]
  Tickets   Tickets[]
}

model Employee {
  id                  Int            @id @default(autoincrement())
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int            @unique
  userProjects        UserProjects[]
  first_name          String
  last_name           String
  email               String         @unique
  phone_number        String
  date_of_birth       String
  expertise           String
  Designation         Designation    @relation(fields: [designation], references: [id])
  designation         Int
  Role                Role           @relation(fields: [role], references: [id])
  role                Int
  date_of_joining     String
  years_of_experience Int
  image_url           String?
  gender              String
  address             String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime?      @updatedAt
  UserTeams           UserTeams[]
  Tickets             Tickets[]
}

model Project {
  id               Int             @id @default(autoincrement())
  user             User            @relation(fields: [ownerId], references: [id])
  ownerId          Int
  project_name     String
  description      String
  userProjects     UserProjects[]
  projectDomain    ProjectDomains? @relation(fields: [projectDomainsId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime?       @updatedAt
  projectDomainsId Int?
  Teams            Teams[]
  Tickets          Tickets[]
}

model Teams {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [ownerId], references: [id])
  project       Project      @relation(fields: [projectId], references: [id])
  ownerId       Int
  projectId     Int
  team_name     String
  description   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
  TeamDomains   TeamDomains? @relation(fields: [teamDomainsId], references: [id])
  teamDomainsId Int?
  UserTeams     UserTeams[]
  Tickets       Tickets[]
}

model Tickets {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [ownerId], references: [id])
  project         Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team            Teams          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  employee        Employee       @relation(fields: [assigneeId], references: [id])
  TicketStatus    TicketStatus?  @relation(fields: [ticketStatusId], references: [id])
  TicketPiority   TicketPiority? @relation(fields: [ticketPiorityId], references: [id])
  ownerId         Int
  projectId       Int
  teamId          Int
  assigneeId      Int
  ticketStatusId  Int?
  ticketPiorityId Int?
  title           String
  description     String
  deadline        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  Resource        Resource[]
}

model Resource {
  id        Int       @id @default(autoincrement())
  url       String
  ticket    Tickets?  @relation(fields: [ticketsId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  ticketsId Int?
}

model UserProjects {
  project     Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id  Int
  employee    Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@id([project_id, employee_id])
}

model UserTeams {
  team        Teams     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id     Int
  employee    Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@id([team_id, employee_id])
}

model Role {
  id        Int        @id @default(autoincrement())
  title     String     @default("Team Member")
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  User      User[]
  Employee  Employee[]
}

model Designation {
  id        Int        @id @default(autoincrement())
  title     String     @default("Associate")
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  Employee  Employee[]
}

model ProjectDomains {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Project   Project[]
}

model TeamDomains {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Teams     Teams[]
}

model TicketStatus {
  id          Int       @id @default(autoincrement())
  ticket      Tickets[]
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model TicketPiority {
  id        Int       @id @default(autoincrement())
  ticket    Tickets[]
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
